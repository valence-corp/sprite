// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SpriteDatabase.query executes a query successfully 1`] = `
[
  {
    "dateFormat": "yyyy-MM-dd",
    "dateTimeFormat": "yyyy-MM-dd HH:mm:ss",
    "encoding": "UTF-8",
    "mode": "READ_WRITE",
    "name": "SpriteIntegrationTesting",
    "path": "./databases/SpriteIntegrationTesting",
    "settings": [
      {
        "default": 4096,
        "description": "Maximum amount of pages (in MB) to keep in RAM",
        "key": "arcadedb.maxPageRAM",
        "overridden": false,
        "value": 512,
      },
      {
        "default": 65535,
        "description": "Initial number of entries for page cache",
        "key": "arcadedb.initialPageCacheSize",
        "overridden": false,
        "value": 65535,
      },
      {
        "default": "java.util.Date",
        "description": "Default date implementation to use on deserialization. By default java.util.Date is used, but the following are supported: java.util.Calendar, java.time.LocalDate",
        "key": "arcadedb.dateImplementation",
        "overridden": false,
        "value": "java.util.Date",
      },
      {
        "default": "yyyy-MM-dd",
        "description": "Default date format using Java SimpleDateFormat syntax",
        "key": "arcadedb.dateFormat",
        "overridden": false,
        "value": "yyyy-MM-dd",
      },
      {
        "default": "java.util.Date",
        "description": "Default datetime implementation to use on deserialization. By default java.util.Date is used, but the following are supported: java.util.Calendar, java.time.LocalDateTime, java.time.ZonedDateTime",
        "key": "arcadedb.dateTimeImplementation",
        "overridden": false,
        "value": "java.util.Date",
      },
      {
        "default": "yyyy-MM-dd HH:mm:ss",
        "description": "Default date time format using Java SimpleDateFormat syntax",
        "key": "arcadedb.dateTimeFormat",
        "overridden": false,
        "value": "yyyy-MM-dd HH:mm:ss",
      },
      {
        "default": true,
        "description": "Uses the WAL",
        "key": "arcadedb.txWAL",
        "overridden": false,
        "value": true,
      },
      {
        "default": 0,
        "description": "Flushes the WAL on disk at commit time. It can be 0 = no flush, 1 = flush without metadata and 2 = full flush (fsync)",
        "key": "arcadedb.txWalFlush",
        "overridden": false,
        "value": 0,
      },
      {
        "default": 50,
        "description": "Percentage (0-100) of memory to free when Page RAM is full",
        "key": "arcadedb.freePageRAM",
        "overridden": false,
        "value": 50,
      },
      {
        "default": 8,
        "description": "Default number of buckets to create per type",
        "key": "arcadedb.typeDefaultBuckets",
        "overridden": false,
        "value": 8,
      },
      {
        "default": 65536,
        "description": "Default page size in bytes for buckets. Default is 64KB",
        "key": "arcadedb.bucketDefaultPageSize",
        "overridden": false,
        "value": 65536,
      },
      {
        "default": 7,
        "description": "Number of asynchronous worker threads. 0 (default) = available cores minus 1",
        "key": "arcadedb.asyncWorkerThreads",
        "overridden": false,
        "value": 1,
      },
      {
        "default": "standard",
        "description": "Queue implementation to use between 'standard' and 'fast'. 'standard' consumes less CPU than the 'fast' implementation, but it could be slower with high loads",
        "key": "arcadedb.asyncOperationsQueueImpl",
        "overridden": false,
        "value": "standard",
      },
      {
        "default": 1024,
        "description": "Size of the total asynchronous operation queues (it is divided by the number of parallel threads in the pool)",
        "key": "arcadedb.asyncOperationsQueueSize",
        "overridden": false,
        "value": 1024,
      },
      {
        "default": 10240,
        "description": "Maximum number of operations to commit in batch by async thread",
        "key": "arcadedb.asyncTxBatchSize",
        "overridden": false,
        "value": 10240,
      },
      {
        "default": 0,
        "description": "When the asynchronous queue is full at a certain percentage, back pressure is applied",
        "key": "arcadedb.asyncBackPressure",
        "overridden": false,
        "value": 0,
      },
      {
        "default": 512,
        "description": "Size of the asynchronous page flush queue",
        "key": "arcadedb.pageFlushQueue",
        "overridden": false,
        "value": 512,
      },
      {
        "default": 5000,
        "description": "Timeout in ms to lock resources during commit",
        "key": "arcadedb.commitLockTimeout",
        "overridden": false,
        "value": 5000,
      },
      {
        "default": 3,
        "description": "Number of retries in case of MVCC exception",
        "key": "arcadedb.txRetries",
        "overridden": false,
        "value": 3,
      },
      {
        "default": 100,
        "description": "Maximum amount of milliseconds to compute a random number to wait for the next retry. This setting is helpful in case of high concurrency on the same pages (multi-thread insertion over the same bucket)",
        "key": "arcadedb.txRetryDelay",
        "overridden": false,
        "value": 100,
      },
      {
        "default": 300,
        "description": "Maximum number of parsed statements to keep in cache",
        "key": "arcadedb.sqlStatementCache",
        "overridden": false,
        "value": 300,
      },
      {
        "default": 0,
        "description": "Default timeout for commands (in ms)",
        "key": "arcadedb.command.timeout",
        "overridden": false,
        "value": 0,
      },
      {
        "default": "auto",
        "description": "Gremlin engine to use. By default the \`auto\` setting uses the legacy \`groovy\` engine in case parameters are set, otherwise, the new native \`java\` is preferred. If you have compatibility issues with gremlin statements that use lambdas or in general, switch to the \`groovy\` one",
        "key": "arcadedb.gremlin.engine",
        "overridden": false,
        "value": "auto",
      },
      {
        "default": 30000,
        "description": "Default timeout for gremlin commands (in ms)",
        "key": "arcadedb.gremlin.timeout",
        "overridden": false,
        "value": 30000,
      },
      {
        "default": 10000,
        "description": "Default timeout for polyglot commands (in ms)",
        "key": "arcadedb.polyglotCommand.timeout",
        "overridden": false,
        "value": 10000,
      },
      {
        "default": 500000,
        "description": "Maximum number of elements (records) allowed in a single query for memory-intensive operations (eg. ORDER BY in heap). If exceeded, the query fails with an OCommandExecutionException. Negative number means no limit.This setting is intended as a safety measure against excessive resource consumption from a single query (eg. prevent OutOfMemory)",
        "key": "arcadedb.queryMaxHeapElementsAllowedPerOp",
        "overridden": false,
        "value": 500000,
      },
      {
        "default": 1000,
        "description": "Max number of entries in the cypher statement cache. Use 0 to disable. Caching statements speeds up execution of the same cypher queries",
        "key": "arcadedb.cypher.statementCache",
        "overridden": false,
        "value": 1000,
      },
      {
        "default": 300,
        "description": "Maximum amount of RAM to use for index compaction, in MB",
        "key": "arcadedb.indexCompactionRAM",
        "overridden": false,
        "value": 300,
      },
      {
        "default": 10,
        "description": "Minimum number of mutable pages for an index to be schedule for automatic compaction. 0 = disabled",
        "key": "arcadedb.indexCompactionMinPagesSchedule",
        "overridden": false,
        "value": 10,
      },
    ],
    "timezone": "Coordinated Universal Time",
  },
]
`;

exports[`SpriteDatabase.query propagates errors from ArcadeDB 1`] = `[Error: Invalid language or query. Status: 400]`;
